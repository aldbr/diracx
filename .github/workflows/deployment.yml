name: Deployment

on:
  push:
  pull_request:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      check-ci:
        description: "Require the CI to have passed for this commit"
        required: true
        default: "yes"
      version:
        description: "Override the release version number (e.g. 8.0.0a5)"

jobs:
  deploy-pypi:
    name: PyPI deployment
    runs-on: "ubuntu-latest"
    if: github.event_name != 'push' || github.repository == 'aldbr/diracx'
    outputs:
      create-release: ${{ steps.check-tag.outputs.create-release }}
    defaults:
      run:
        # We need extglob for REFERENCE_BRANCH substitution
        shell: bash -l -O extglob {0}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Installing dependencies
        run: |
          python -m pip install \
              build \
              python-dateutil \
              pytz \
              readme_renderer[md] \
              requests \
              setuptools_scm
      - name: Create tag if required
        id: check-tag
        run: |
          set -xeuo pipefail
          IFS=$'\n\t'
          # Only do a real release for workflow_dispatch events
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "create-release=true" >> $GITHUB_OUTPUT
          fi
      - name: Build distributions
        run: |
          for pkg_dir in $PWD/diracx-*; do
            echo "Building $pkg_dir"
            python -m build --outdir $PWD/dist $pkg_dir
          done
          # Also build the diracx metapackage
          python -m build --outdir $PWD/dist .
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: diracx-whl
          path: dist/diracx*.whl
          retention-days: 5

# -------------------------------------------------------------------------------------------------
# Gubbins deployment
# -------------------------------------------------------------------------------------------------

  build-gubbins-wheels:
    name: Build wheels
    runs-on: "ubuntu-latest"
    needs: deploy-pypi
    if: ${{ needs.deploy-pypi.outputs.create-release == 'true' }}
    defaults:
      run:
        # We need extglob for REFERENCE_BRANCH substitution
        shell: bash -l -O extglob {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Installing dependencies
        run: |
          python -m pip install \
              build \
              python-dateutil \
              pytz \
              readme_renderer[md] \
              requests \
              setuptools_scm
      - name: Build distributions
        run: |
          # build the gubbins package
          for pkg_dir in $PWD/extensions/gubbins/gubbins-*; do
            # Skip the testing package
            if [[ "${pkg_dir}" =~ .*testing.* ]];
            then
              echo "Do not build ${pkg_dir}";
              continue;
            fi
            echo "Building $pkg_dir"
            python -m build --outdir $PWD/dist $pkg_dir
          done
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: gubbins-whl
          path: dist/*.whl
          retention-days: 5

  # Build to docker image with the code in it
  docker-gubbins:
    needs:
      - deploy-pypi
      - build-gubbins-wheels
    if: ${{ needs.deploy-pypi.outputs.create-release == 'true' }}
    timeout-minutes:  30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download diracx wheels
        uses: actions/download-artifact@v4
        with:
            name: diracx-whl
      - name: Download gubbins wheels
        uses: actions/download-artifact@v4
        with:
            name: gubbins-whl
      - name: "Find wheels"
        id: find_wheel
        run: |
          # We need to copy them there to be able to access them in the RUN --mount
          cp diracx*.whl gubbins*.whl extensions/containers/client/
          cp diracx*.whl gubbins*.whl extensions/containers/services/
          for wheel_fn in *.whl; do
            pkg_name=$(basename "${wheel_fn}" | cut -d '-' -f 1)
            echo "${pkg_name}-wheel-name=$(ls "${pkg_name}"-*.whl)" >> $GITHUB_OUTPUT
          done

      - name: Build and push client (dev)
        uses: docker/build-push-action@v6
        with:
          context: extensions/containers/client
          push: ${{ needs.deploy-pypi.outputs.create-release == 'true' }}
          tags: ghcr.io/aldbr/gubbins/client:dev
          platforms: linux/amd64,linux/arm64
      - name: Build and push service (dev)
        uses: docker/build-push-action@v6
        with:
          context: extensions/containers/services
          push: ${{ needs.deploy-pypi.outputs.create-release == 'true' }}
          tags: ghcr.io/aldbr/gubbins/services:dev
          platforms: linux/amd64,linux/arm64
          build-args: |
            EXTRA_PACKAGES_TO_INSTALL=git+https://github.com/DIRACGrid/DIRAC.git@integration
            EXTENSION_CUSTOM_SOURCES_TO_INSTALL=/bindmount/gubbins_db*.whl,/bindmount/gubbins_logic*.whl,/bindmount/gubbins_routers*.whl,/bindmount/gubbins_client*.whl
